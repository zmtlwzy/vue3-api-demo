import{g as e,ay as a,au as t,o as n,M as s,w as o,j as l,P as r,f,ap as u,at as c,a1 as d}from"./vendor.af4c8771.js";var i=e({name:"ShallowReactive",setup(){const e=a({foo:1,nested:{bar:2}});return e.foo++,console.log(t(e.nested)),e.nested.bar++,{}}});const p=r(" 创建一个响应式代理，它跟踪其自身 property 的响应性，但不执行嵌套对象的深层响应式转换 (暴露原始值)。"),v=f("br",null,null,-1),b=r(" 与 "),g=r("reactive"),m=r(" 不同，任何使用 "),j=r("ref"),w=r(" 的 property 都不会被代理自动解包。 ");i.render=function(e,a,t,r,f,i){const y=u,R=c,_=d;return n(),s(_,{title:e.$options.name},{footer:o((()=>[l(R,{code:"\nconst state = shallowReactive({\n  foo: 1,\n  nested: {\n    bar: 2,\n  },\n});\n\n// 改变 state 本身的性质是响应式的\nstate.foo++;\n// ...但是不转换嵌套对象\nisReactive(state.nested); // false\nstate.nested.bar++; // 非响应式\n  ",language:"javascript"},null,8,["code"])])),default:o((()=>[p,v,b,l(y,null,{default:o((()=>[g])),_:1}),m,l(y,null,{default:o((()=>[j])),_:1}),w])),_:1},8,["title"])};export{i as default};
