import{_ as a}from"./index.15a0d8dd.js";import{e,ay as n,au as t,O as s,w as o,a2 as r,o as l,j as d,Q as u,i as f,ao as p,as as i}from"./vendor.3c431514.js";const c=e({name:"ShallowReadonly",setup(){const a=n({foo:1,nested:{bar:2}});return a.foo++,t(a.nested),a.nested.bar++,{}}}),y=u(" 创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换 (暴露原始值)。 "),m=f("br",null,null,-1),b=u(" 与 "),j=u("readonly"),_=u(" 不同，任何使用 "),v=u("ref"),w=u(" 的 property 都不会被代理自动解包。 ");var x=a(c,[["render",function(a,e,n,t,u,f){const c=p,x=i,R=r;return l(),s(R,{title:a.$options.name},{footer:o((()=>[d(x,{code:"\nconst state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2,\n  },\n});\n\n// 改变 state 本身的 property 将失败\nstate.foo++;\n// ...但适用于嵌套对象\nisReadonly(state.nested); // false\nstate.nested.bar++; // 适用\n  ",language:"javascript"},null,8,["code"])])),default:o((()=>[y,m,b,d(c,null,{default:o((()=>[j])),_:1}),_,d(c,null,{default:o((()=>[v])),_:1}),w])),_:1},8,["title"])}]]);export{x as default};
