import{g as a,az as e,av as n,o as t,M as s,w as o,j as r,P as l,f as d,ap as f,at as u,a1 as p}from"./vendor.af4c8771.js";var c=a({name:"ShallowReadonly",setup(){const a=e({foo:1,nested:{bar:2}});return a.foo++,n(a.nested),a.nested.bar++,{}}});const y=l(" 创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换 (暴露原始值)。"),i=d("br",null,null,-1),b=l(" 与 "),m=l("readonly"),v=l(" 不同，任何使用 "),g=l("ref"),j=l(" 的 property 都不会被代理自动解包。 ");c.render=function(a,e,n,l,d,c){const w=f,R=u,_=p;return t(),s(_,{title:a.$options.name},{footer:o((()=>[r(R,{code:"\nconst state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2,\n  },\n});\n\n// 改变 state 本身的 property 将失败\nstate.foo++;\n// ...但适用于嵌套对象\nisReadonly(state.nested); // false\nstate.nested.bar++; // 适用\n  ",language:"javascript"},null,8,["code"])])),default:o((()=>[y,i,b,r(w,null,{default:o((()=>[m])),_:1}),v,r(w,null,{default:o((()=>[g])),_:1}),j])),_:1},8,["title"])};export{c as default};
