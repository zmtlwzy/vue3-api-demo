import{g as o,aw as e,at as n,r as s,o as a,L as t,n as l,m as c,O as r,ao as d,as as f,a0 as i}from"./vendor.173cf73b.js";var g=o({name:"MakeRaw",setup(){const o=e({});console.log(n(s(o)));const a=s({foo:o});console.log(n(a.foo));const t=e({nested:{}}),l=s({nested:t.nested});return console.log(t.nested===l.nested),console.log(t.nested,l.nested),{}}});const u=r(" 标记一个对象，使其永远不会转换为 "),v=r("proxy"),m=r("。返回对象本身。 ");g.render=function(o,e,n,s,r,g){const b=d,p=f,R=i;return a(),t(R,{title:o.$options.name},{footer:l((()=>[c(p,{code:"\nconst foo = markRaw({});\nconsole.log(isReactive(reactive(foo))); // false\n\n// 嵌套在其他响应式对象中时也可以使用\nconst bar = reactive({ foo });\nconsole.log(isReactive(bar.foo)); // false\n\nconst foo2 = markRaw({\n  nested: {},\n});\n\nconst bar2 = reactive({\n  // 虽然 foo2 被标记为原始，但 foo2.nested 不是。\n  nested: foo2.nested,\n});\n\nconsole.log(foo2.nested === bar2.nested); // false\nconsole.log(foo2.nested, bar2.nested);\n  ",language:"javascript"},null,8,["code"])])),default:l((()=>[u,c(b,null,{default:l((()=>[v])),_:1}),m])),_:1},8,["title"])};export{g as default};
