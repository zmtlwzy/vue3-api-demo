import{_ as o}from"./index.86834fdb.js";import{e,aw as n,at as s,r as a,O as t,w as l,a2 as c,o as r,j as d,Q as f,ao as i,as as g}from"./vendor.87a6fcc2.js";const u=e({name:"MakeRaw",setup(){const o=n({});console.log(s(a(o)));const e=a({foo:o});console.log(s(e.foo));const t=n({nested:{}}),l=a({nested:t.nested});return console.log(t.nested===l.nested),console.log(t.nested,l.nested),{}}}),m=f(" 标记一个对象，使其永远不会转换为 "),v=f("proxy"),p=f(" 。返回对象本身。 ");var b=o(u,[["render",function(o,e,n,s,a,f){const u=i,b=g,w=c;return r(),t(w,{title:o.$options.name},{footer:l((()=>[d(b,{code:"\nconst foo = markRaw({});\nconsole.log(isReactive(reactive(foo))); // false\n\n// 嵌套在其他响应式对象中时也可以使用\nconst bar = reactive({ foo });\nconsole.log(isReactive(bar.foo)); // false\n\nconst foo2 = markRaw({\n  nested: {},\n});\n\nconst bar2 = reactive({\n  // 虽然 foo2 被标记为原始，但 foo2.nested 不是。\n  nested: foo2.nested,\n});\n\nconsole.log(foo2.nested === bar2.nested); // false\nconsole.log(foo2.nested, bar2.nested);\n  ",language:"javascript"},null,8,["code"])])),default:l((()=>[m,d(u,null,{default:l((()=>[v])),_:1}),p])),_:1},8,["title"])}]]);export{b as default};
