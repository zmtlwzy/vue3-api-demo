import{e,ar as a,an as n,o as t,J as s,j as o,i as l,M as r,l as d,ah as u,al as f,X as p}from"./vendor.2ed87477.js";var c=e({name:"ShallowReadonly",setup(){const e=a({foo:1,nested:{bar:2}});return e.foo++,n(e.nested),e.nested.bar++,{}}});const i=r(" 创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换 (暴露原始值)。"),y=d("br",null,null,-1),b=r(" 与 "),m=r("readonly"),h=r(" 不同，任何使用 "),j=r("ref"),v=r(" 的 property 都不会被代理自动解包。 ");c.render=function(e,a,n,r,d,c){const R=u,_=f,g=p;return t(),s(g,{title:e.$options.name},{footer:o((()=>[l(_,{code:"\nconst state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2,\n  },\n});\n\n// 改变 state 本身的 property 将失败\nstate.foo++;\n// ...但适用于嵌套对象\nisReadonly(state.nested); // false\nstate.nested.bar++; // 适用\n  ",language:"javascript"},null,8,["code"])])),default:o((()=>[i,y,b,l(R,null,{default:o((()=>[m])),_:1}),h,l(R,null,{default:o((()=>[j])),_:1}),v])),_:1},8,["title"])};export{c as default};
